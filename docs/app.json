[{"name": "app.py", "content": "from shiny import reactive, render, req\nfrom shiny.express import ui\n\nfrom datetime import datetime\nfrom collections import deque\nimport pandas as pd\nimport plotly.express as px\nfrom shinywidgets import render_plotly\nfrom scipy import stats\nfrom faicons import icon_svg\nimport random\nfrom math import sqrt\n\n\nUPDATE_INTERVAL_SECS: int = 3\nDEQUE_SIZE: int = 5\nreactive_value_wrapper = reactive.value(deque(maxlen=DEQUE_SIZE))\n\n@reactive.calc()\ndef reactive_calc_combined():\n\n    reactive.invalidate_later(UPDATE_INTERVAL_SECS)\n\n    temp = round(random.uniform(-18, -16), 1)\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    new_dictionary_entry = {\"temp\":temp, \"timestamp\":timestamp}\n    reactive_value_wrapper.get().append(new_dictionary_entry)\n    df = pd.DataFrame(reactive_value_wrapper.get())\n\n    return df, new_dictionary_entry\n\nui.page_opts(title=\"PyShiny Express: Live Data Example\", fillable=True)\n\nwith ui.sidebar(open=\"open\"):\n\n    ui.h2(\"Antarctic Explorer\", class_=\"text-center\")\n    ui.p(\n        \"A demonstration of real-time temperature readings in Antarctica.\",\n        class_=\"text-center\",\n    )\n    ui.hr()\n    ui.h6(\"Links:\")\n    ui.a(\n        \"GitHub Source\",\n        href=\"https://github.com/denisecase/cintel-05-cintel\",\n        target=\"_blank\",\n    )\n    ui.a(\n        \"GitHub App\",\n        href=\"https://denisecase.github.io/cintel-05-cintel/\",\n        target=\"_blank\",\n    )\n    ui.a(\"PyShiny\", href=\"https://shiny.posit.co/py/\", target=\"_blank\")\n    ui.a(\n        \"PyShiny Express\",\n        href=\"hhttps://shiny.posit.co/blog/posts/shiny-express/\",\n        target=\"_blank\",\n    )\n\nwith ui.layout_columns():\n    with ui.value_box(\n        showcase=icon_svg(\"sun\"),\n        theme=\"bg-gradient-blue-purple\",\n    ):\n\n        \"Current Temperature\"\n\n        @render.text\n        def display_temp():\n            \"\"\"Get the latest reading and return a temperature string\"\"\"\n            df, latest_dictionary_entry = reactive_calc_combined()\n            return f\"{latest_dictionary_entry['temp']} C\"\n\n        @render.text\n        def display_time():\n            \"\"\"Get the latest reading and return a timestamp string\"\"\"\n            df, latest_dictionary_entry = reactive_calc_combined()\n            return f\"{latest_dictionary_entry['timestamp']}\"\n\n\n#with ui.card(full_screen=True, min_height=\"40%\"):\n    with ui.card(full_screen=True):\n        ui.card_header(\"Most Recent Readings\")\n\n        @render.data_frame\n        def display_df():\n            \"\"\"Get the latest reading and return a dataframe with current readings\"\"\"\n            df, latest_dictionary_entry = reactive_calc_combined()\n            pd.set_option('display.width', None)        # Use maximum width\n            return render.DataGrid( df,width=\"100%\")\n\nwith ui.card():\n    ui.card_header(f\"Chart with Current Trend\")\n\n    @render_plotly\n    def display_plot():\n\n        df, latest_dictionary_entry = reactive_calc_combined()\n        req(len(df)>2)\n\n        df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])\n\n        fig = px.scatter(\n            df,\n            x=\"timestamp\",\n            y=\"temp\",\n            title=\"Temperature Readings with Regression Line\",\n            labels={\"temp\": \"Temperature (\u00b0C)\", \"timestamp\": \"Time\"},\n            color_discrete_sequence=[\"blue\"],\n            template = \"plotly_white\"\n        )\n            \n        x_vals = [*range(len(df))]\n        slope, intercept, r_value, p_value, std_err = stats.linregress(x_vals, df['temp'])\n        df['best_fit_line'] = [slope * x + intercept for x in x_vals]\n\n        df['residuals'] = df['temp'] - df['best_fit_line']\n        # Residual Sum of Squares\n        rss = sum(df['residuals']**2)\n        # Degrees of Freedom for simple linear regression is #points - 2\n        degrees_freedom = len(df) - 2\n        # Residual Standard Error\n        rse = sqrt(rss/degrees_freedom)\n        \n        display_text = f'R-sqr: {r_value**2:.5e}<br>RSE: {rse:.5e}<br>{len(df)}'\n\n        fig.add_scatter(x=df[\"timestamp\"], y=df['best_fit_line'], mode='lines', name='Regression Line', line_color='forestgreen')\n        fig.update_layout(xaxis_title=\"Time\",yaxis_title=\"Temperature (\u00b0C)\")\n        fig.add_annotation(\n            text= display_text,\n            xref=\"paper\", yref=\"paper\",\n            x=1.122, y=0.9,\n            showarrow=False,\n            font=dict(size=11, color=\"black\"),\n            align=\"right\",\n        )\n\n        return fig", "type": "text"}, {"name": "bapp.py", "content": "from shiny import reactive, render, req\nfrom shiny.express import ui\nimport random\nfrom datetime import datetime\nfrom collections import deque\nimport pandas as pd\nimport plotly.express as px\nfrom shinywidgets import render_plotly\nfrom scipy import stats\nfrom faicons import icon_svg\n\n\nUPDATE_INTERVAL_SECS: int = 3\nDEQUE_SIZE: int = 5\nreactive_value_wrapper = reactive.value(deque(maxlen=DEQUE_SIZE))\n\n@reactive.calc()\ndef reactive_calc_combined():\n\n    reactive.invalidate_later(UPDATE_INTERVAL_SECS)\n\n    temp = round(random.uniform(-18, -16), 1)\n    timestamp = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    new_dictionary_entry = {\"temp\":temp, \"timestamp\":timestamp}\n    reactive_value_wrapper.get().append(new_dictionary_entry)\n    df = pd.DataFrame(reactive_value_wrapper.get())\n\n    return df, new_dictionary_entry\n\nui.page_opts(title=\"PyShiny Express: Live Data Example\", fillable=True)\n\nwith ui.sidebar(open=\"open\"):\n\n    ui.h2(\"Antarctic Explorer\", class_=\"text-center\")\n    ui.p(\n        \"A demonstration of real-time temperature readings in Antarctica.\",\n        class_=\"text-center\",\n    )\n    ui.hr()\n    ui.h6(\"Links:\")\n    ui.a(\n        \"GitHub Source\",\n        href=\"https://github.com/denisecase/cintel-05-cintel\",\n        target=\"_blank\",\n    )\n    ui.a(\n        \"GitHub App\",\n        href=\"https://denisecase.github.io/cintel-05-cintel/\",\n        target=\"_blank\",\n    )\n    ui.a(\"PyShiny\", href=\"https://shiny.posit.co/py/\", target=\"_blank\")\n    ui.a(\n        \"PyShiny Express\",\n        href=\"hhttps://shiny.posit.co/blog/posts/shiny-express/\",\n        target=\"_blank\",\n    )\n\nwith ui.layout_columns():\n    with ui.value_box(\n        showcase=icon_svg(\"sun\"),\n        theme=\"bg-gradient-blue-purple\",\n    ):\n\n        \"Current Temperature\"\n\n        @render.text\n        def display_temp():\n            \"\"\"Get the latest reading and return a temperature string\"\"\"\n            df, latest_dictionary_entry = reactive_calc_combined()\n            return f\"{latest_dictionary_entry['temp']} C\"\n\n        \"warmer than usual\"\n\n    with ui.card(full_screen=True):\n        ui.card_header(\"Current Date and Time\")\n\n        @render.text\n        def display_time():\n            \"\"\"Get the latest reading and return a timestamp string\"\"\"\n            df, latest_dictionary_entry = reactive_calc_combined()\n            return f\"{latest_dictionary_entry['timestamp']}\"\n\n\n#with ui.card(full_screen=True, min_height=\"40%\"):\nwith ui.card(full_screen=True):\n    ui.card_header(\"Most Recent Readings\")\n\n    @render.data_frame\n    def display_df():\n        \"\"\"Get the latest reading and return a dataframe with current readings\"\"\"\n        df, latest_dictionary_entry = reactive_calc_combined()\n        pd.set_option('display.width', None)        # Use maximum width\n        return render.DataGrid( df,width=\"100%\")\n\nwith ui.card():\n    ui.card_header(f\"Chart with Current Trend\")\n\n    @render_plotly\n    def display_plot():\n\n        df, latest_dictionary_entry = reactive_calc_combined()\n        req(len(df)>1)\n\n        df[\"timestamp\"] = pd.to_datetime(df[\"timestamp\"])\n\n        fig = px.scatter(\n            df,\n            x=\"timestamp\",\n            y=\"temp\",\n            title=\"Temperature Readings with Regression Line\",\n            labels={\"temp\": \"Temperature (\u00b0C)\", \"timestamp\": \"Time\"},\n            color_discrete_sequence=[\"blue\"],\n            template = \"plotly_white\"\n        )\n            \n        x_vals = [*range(len(df))]\n        slope, intercept, r_value, p_value, std_err = stats.linregress(x_vals, df['temp'])\n        df['best_fit_line'] = [slope * x + intercept for x in x_vals]\n\n        fig.add_scatter(x=df[\"timestamp\"], y=df['best_fit_line'], mode='lines', name='Regression Line', line_color='forestgreen')\n        fig.update_layout(xaxis_title=\"Time\",yaxis_title=\"Temperature (\u00b0C)\")\n        fig.add_annotation(\n            text=f'R-sqr: {r_value**2:.5e}',\n            xref=\"paper\", yref=\"paper\",\n            x=1.122, y=0.9,\n            showarrow=False,\n            font=dict(size=11, color=\"black\"),\n            align=\"right\",\n        )\n\n        return fig", "type": "text"}]